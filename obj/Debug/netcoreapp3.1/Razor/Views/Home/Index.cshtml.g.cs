#pragma checksum "C:\Users\YKunnummal\source\FrontEnd\Validation\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7fd9d2f7670ba2569ccf8cb9a476ff41ca604bce"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\YKunnummal\source\FrontEnd\Validation\Views\_ViewImports.cshtml"
using Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\YKunnummal\source\FrontEnd\Validation\Views\_ViewImports.cshtml"
using Validation.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7fd9d2f7670ba2569ccf8cb9a476ff41ca604bce", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cd69ce890e43149ad22038c96c0a416454874b9b", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<h2>Way of doing validation in .Net MVc</h2>
<ol>
    <li>HTML5 Form validation-good for handling user input, used on views</li>
    <li>Data annotations-good for both forms and database validation, many SQL rules you apply have their own data annotation, used on models</li>
    <li>Controller Side Validation - where you can use any kind of C# code, useful for cases that HTML and Data Annotation can't cover or for something specific</li>
    <li>Javascript on Views - if you want C# controller style validation but on your front-end, Javascript and C# struggle to talk to each other since they run at oppposite times, BUT outside of .Net on static web sites JS will be useful, JS is loosely typed, meaning any variable can be any data type at any time</li>
    <li>RegEx - this stands for regular expressions and can be used on both forms and in the controller. Good for any common pattern(IE phone number) that isn't covered by other methods.Easy to use on forms. My advice on RegEx: don't try and write your own,");
            WriteLiteral(" instead google the regex and steal from someone with 6 Phds.</li>\r\n</ol>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
